#define ZMK_POINTING_DEFAULT_SCRL_VAL 120    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        scroll {
            bindings = <&lt 5 SPACE>;
            key-positions = <19 18>;
        };

        lock {
            bindings = <&kp LG(KP_NUMBER_2)>;
            key-positions = <37 38 1>;
        };

        kakusu {
            bindings = <&kp LG(KP_NUMBER_3)>;
            key-positions = <2 37 38>;
        };

        unlock {
            bindings = <&none>;
            key-positions = <11 37 38>;
        };

        miseru {
            bindings = <&kp LG(LA(KP_NUMBER_3))>;
            key-positions = <12 37 38>;
        };

        spac {
            bindings = <&kp SPACE>;
            key-positions = <37 38>;
        };

        artboard {
            bindings = <&kp LG(KP_NUMBER_1)>;
            key-positions = <1 38 37>;
        };

        artboard_all {
            bindings = <&kp LG(LA(KP_NUMBER_0))>;
            key-positions = <11 37 38>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        ROTATE: ROTATE {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "ROTATE";
            #sensor-binding-cells = <2>;
            bindings = <&msc>, <&msc>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                   &kp T                                                       &kp Y        &kp U    &kp I      &kp O    &kp P
&kp A             &kp S         &kp D         &kp F                   &kp G        &kp F3                      &kp BACKSLASH      &kp H        &lt 5 J  &kp K      &kp L    &kp MINUS
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                   &kp B        &kp TAB                     &kp RIGHT_BRACKET  &kp N        &kp M    &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL         &kp LEFT_ALT  &kp LEFT_GUI  &lt_to_layer_0 6 LANG1  &lt 3 SPACE  &lt_to_layer_0 2 LANG2      &kp BACKSPACE      &lt 1 ENTER                               &kp ENTER
            >;

            sensor-bindings = <&ROTATE SCRL_DOWN SCRL_UP>;
        };

        FUNCTION {
            bindings = <
&kp EXCLAMATION  &kp QUESTION  &trans  &trans  &trans                       &kp RC(UP_ARROW)  &kp F2  &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
&trans           &trans        &trans  &trans  &trans  &trans      &kp F13  &kp F6            &kp F7  &kp F8      &kp F9             &kp F10
&trans           &trans        &trans  &trans  &trans  &trans      &trans   &trans            &trans  &trans      &trans             &kp F11
&trans           &trans        &trans  &trans  &trans  &trans      &trans   &trans                                                   &kp F12
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LG(TAB)         &trans          &kp UP_ARROW         &kp BACKSPACE                           &trans      &kp UP_ARROW    &trans     &trans  &trans
&kp TAB         &trans              &kp LEFT_ARROW  &kp DOWN_ARROW       &kp RIGHT_ARROW  &trans         &trans  &kp LEFT    &kp DOWN_ARROW  &kp RIGHT  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LEFT_ARROW)  &trans          &kp LG(RIGHT_ARROW)  &kp HOME         &kp SPACE      &trans  &kp DELETE  &kp ENTER       &trans     &trans  &trans
&trans          &trans              &trans          &trans               &trans           &trans         &trans  &trans                                         &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        NUM {
            bindings = <
&kp MINUS           &kp PLUS         &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9                                 &kp EXCLAMATION              &kp AT_SIGN                    &kp HASH      &kp DOLLAR            &kp PERCENT
&kp SLASH           &kp DOT          &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp COMMA      &kp UNDERSCORE  &kp CARET                    &kp AMPERSAND                  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&mt LEFT_SHIFT DOT  &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp EQUAL      &kp QUESTION    &mt LEFT_BRACE LEFT_BRACKET  &mt RIGHT_BRACE RIGHT_BRACKET  &kp COLON     &kp SQT               &kp BACKSLASH
&trans              &trans           &trans           &trans           &trans           &trans         &trans          &trans                                                                                          &kp PIPE
            >;
        };

        MOUSE {
            bindings = <
&trans    &trans     &trans     &trans     &trans                           &trans    &trans              &trans               &trans     &kp HOME
&mkp MB4  &mkp LCLK  &mkp MCLK  &mkp RCLK  &mkp MB5  &mkp LCLK      &trans  &mkp MB4  &mkp LCLK           &mkp RCLK            &mkp RCLK  &kp SPACE
&trans    &trans     &trans     &trans     &trans    &mkp RCLK      &trans  &trans    &kp RG(LEFT_ARROW)  &kp RG(RIGHT_ARROW)  &trans     &trans
&trans    &trans     &trans     &trans     &trans    &trans         &trans  &trans                                                        &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans    &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp HOME  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp END   &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans    &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&kp ESCAPE              &kp BACKSPACE           &kp LG(LS(LC(NUMBER_4)))  &kp LG(LA(KP_NUMBER_3))  &kp LG(KP_NUMBER_3)                                &bt BT_SEL 0  &bt BT_SEL 1  &trans  &trans  &kp BACKSPACE
&kp ENTER               &kp LG(LA(UP_ARROW))    &trans                    &kp LG(LA(KP_NUMBER_2))  &kp LG(KP_NUMBER_2)  &trans           &bootloader  &bt BT_SEL 2  &bt BT_SEL 3  &trans  &trans  &trans
&kp LG(LA(LEFT_ARROW))  &kp LG(LA(DOWN_ARROW))  &kp LG(LA(RIGHT_ARROW))   &kp SPACE                &trans               &bootloader      &bootloader  &bt BT_SEL 4  &trans        &trans  &trans  &bt BT_CLR
&trans                  &trans                  &trans                    &trans                   &trans               &trans           &trans       &trans                                      &bt BT_CLR_ALL
            >;
        };

        layer_7 {
            bindings = <
&trans  &kp LG(KP_NUMBER_2)      &kp LG(KP_NUMBER_3)      &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &kp LG(LA(KP_NUMBER_2))  &kp LG(LA(KP_NUMBER_3))  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans                   &trans                   &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans                   &trans                   &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
